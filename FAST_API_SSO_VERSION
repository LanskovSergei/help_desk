import os
from fastapi import FastAPI, Request, HTTPException
from pydantic import BaseModel
from typing import Optional
import uvicorn
from datetime import datetime, timedelta

from llama_index.core import load_index_from_storage, Settings
from llama_index.core.storage.storage_context import StorageContext
from llama_index.llms.openai import OpenAI
from llama_index.embeddings.openai import OpenAIEmbedding

from jose import jwt, JWTError
from fastapi.responses import HTMLResponse, RedirectResponse
import requests

# ==== Config ====
os.environ["OPENAI_API_KEY"] = ""

ALLOWED_USER_IDS = {"118", "6260"}
SECRET_KEY = "your-very-secret-key"
ALGORITHM = "HS256"
OUTLINE_API_KEY = os.getenv("OUTLINE_API_KEY") or "your_outline_api_key"
OUTLINE_API_URL = "https://your-outline.com/api/documents"
OUTLINE_USER_API = "https://your-outline.com/api/users.create"
OUTLINE_REDIRECT_URL = "https://your-outline.com/auth/email.callback"

Settings.llm = OpenAI(model="gpt-3.5-turbo", temperature=0)
Settings.embed_model = OpenAIEmbedding(model="text-embedding-3-small")

# ==== Загрузка индекса ====
storage_context = StorageContext.from_defaults(persist_dir="./storage")
index = load_index_from_storage(storage_context)
query_engine = index.as_query_engine(similarity_top_k=3)

# ==== FastAPI App ====
app = FastAPI()

class QuestionRequest(BaseModel):
    question: str
    user_id: Optional[str] = None

class AIResponse(BaseModel):
    answer: str
    article_url: Optional[str] = None
    has_answer: bool
    user_id: Optional[str] = None

class SSORequest(BaseModel):
    email: str
    name: str
    user_id: str
    ip: Optional[str] = "127.0.0.1"

# ==== Вспомогательные функции ====
def generate_article_token(article_id: str, user_id: str, expires_minutes: int = 15) -> str:
    payload = {
        "article_id": article_id,
        "user_id": user_id,
        "exp": datetime.utcnow() + timedelta(minutes=expires_minutes)
    }
    return jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)

def generate_sso_token(email: str, user_id: str, expires_minutes: int = 15) -> str:
    payload = {
        "email": email,
        "user_id": user_id,
        "exp": datetime.utcnow() + timedelta(minutes=expires_minutes)
    }
    return jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)

def create_outline_user(email: str, name: str, ip: str):
    payload = {"email": email, "name": name, "ip": ip}
    headers = {"Authorization": f"Bearer {SECRET_KEY}"}
    response = requests.post(OUTLINE_USER_API, json=payload, headers=headers)
    return response.status_code == 200

# ==== Основной эндпоинт ====
@app.post("/ask", response_model=AIResponse)
async def ask_ai(request: QuestionRequest):
    log_line = f"{datetime.now().isoformat()} | USER_ID: {request.user_id} | Q: {request.question}\n"
    with open("requests.log", "a") as f:
        f.write(log_line)

    if request.user_id not in ALLOWED_USER_IDS:
        return AIResponse(
            answer="Access denied. You are not authorized to use this service.",
            article_url=None,
            has_answer=False,
            user_id=request.user_id
        )

    try:
        response = query_engine.query(request.question)
        response_text = str(response).strip().lower()

        failure_phrases = [
            "no information", "no relevant", "no results", "i don't know",
            "не найдено", "не удалось найти", "нет информации", "в предоставленном контексте не"
        ]

        if not response_text or any(phrase in response_text for phrase in failure_phrases) or len(response_text) < 10:
            return AIResponse(
                answer="Answer not found.",
                article_url=None,
                has_answer=False,
                user_id=request.user_id
            )

        try:
            raw_url = response.source_nodes[0].node.metadata.get("url")
            article_id = raw_url.split("/")[-1] if raw_url else None
            article_url = (
                f"https://yourdomain.com/article/{article_id}?token={generate_article_token(article_id, request.user_id)}"
                if article_id else None
            )
        except Exception:
            article_url = None

        return AIResponse(
            answer=str(response),
            article_url=article_url,
            has_answer=True,
            user_id=request.user_id
        )

    except Exception:
        return AIResponse(
            answer="Answer not found.",
            article_url=None,
            has_answer=False,
            user_id=request.user_id
        )

# ==== Эндпоинт получения статьи по токену ====
@app.get("/article/{article_id}")
async def get_article(article_id: str, request: Request):
    token = request.query_params.get("token")
    if not token:
        raise HTTPException(status_code=403, detail="Token is required")

    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        if payload.get("article_id") != article_id:
            raise HTTPException(status_code=403, detail="Token mismatch")
    except JWTError:
        raise HTTPException(status_code=403, detail="Invalid or expired token")

    response = requests.get(
        f"{OUTLINE_API_URL}/{article_id}",
        headers={"Authorization": f"Bearer {OUTLINE_API_KEY}"}
    )

    if response.status_code != 200:
        raise HTTPException(status_code=404, detail="Article not found")

    try:
        text = response.json()["data"]["document"]["text"]
    except Exception:
        text = "<p>Article could not be parsed</p>"

    return HTMLResponse(content=text)

# ==== Новый эндпоинт для входа через email (Bitrix) ====
@app.get("/sso")
async def sso_entry(email: str, name: str, user_id: str, ip: Optional[str] = "127.0.0.1"):
    log_line = f"{datetime.now().isoformat()} | SSO | USER_ID: {user_id} | EMAIL: {email} | NAME: {name}\n"
    with open("sso.log", "a") as f:
        f.write(log_line)

    create_outline_user(email, name, ip)
    token = generate_sso_token(email, user_id)
    redirect_url = f"{OUTLINE_REDIRECT_URL}?token={token}&email={email}"
    return RedirectResponse(redirect_url)

# ==== Запуск сервера ====
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)

